{
	"info": {
		"_postman_id": "5796ea39-6db5-4f58-9c9d-a70ea12caf31",
		"name": "Postman Presentation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Requests in Sequence",
			"item": [
				{
					"name": "Get Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonBody = pm.response.json();\r",
									"const my_data = jsonBody.filter(post => post.userId === 1)\r",
									"pm.variables.set(\"my_temporary_data\", JSON.stringify(my_data))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						},
						"description": "This request gets some posts from a fake data generator repository. The Test script included on it retrieves the posts with userId equals to 1."
					},
					"response": []
				},
				{
					"name": "Delete Posts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const my_data = JSON.parse(pm.variables.get(\"my_temporary_data\"))\r",
									"const post = my_data.shift();\r",
									"pm.variables.set(\"my_temporary_data\", JSON.stringify(my_data))\r",
									"pm.variables.set(\"post_id\", post.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const my_data = JSON.parse(pm.variables.get(\"my_temporary_data\"))\r",
									"const post_id = JSON.parse(pm.variables.get(\"post_id\"))\r",
									"\r",
									"if(my_data.length > 0)\r",
									"    postman.setNextRequest(\"Delete Posts\")\r",
									"\r",
									"pm.test(`Deleted Post ${post_id}`, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/{{post_id}}",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains two requests to be used together.\r\nThe first request will retrive all posts from a database, and filter the ones with userId equals to 1.\r\nAfter that, the Delete Post request will be executed until all data filtered in the previous request be processed.\r\n\r\nIMPORTANT: None of the data is going to be changed in the database. This endpoint is just simulating a REST Api behaviour",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Importing Data From File",
			"item": [
				{
					"name": "Delete Posts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const post_id = pm.variables.get(\"post_id\")\r",
									"pm.test(`Deleted Post ${post_id}`, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/{{post_id}}",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"{{post_id}}"
							]
						},
						"description": "Use this importing a data file with all post ids you want to use in this request"
					},
					"response": []
				}
			],
			"description": "This is a test case to be used along with iteration data imported from a json file.\r\nYour json file then should look like this:\r\n\r\n[\r\n    {\r\n        \"post_id\" : 1\r\n    },\r\n    {\r\n        \"post_id\" : 2\r\n    },\r\n    {\r\n        \"post_id\" : 3\r\n    },\r\n    ...\r\n]\r\n\r\nEach object is going to be an iteration, and each property of this object is going to be used as variables in the request\r\n\r\nIMPORTANT: None of the data is going to be changed in the database. This endpoint is just simulating a REST Api behaviour",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Response Validation",
			"item": [
				{
					"name": "Get User - Validate Status Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let shouldHandleData = false;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    shouldHandleData = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"    shouldHandleData = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response status equals to Ok\", function () {\r",
									"    pm.response.status.localeCompare(\"Ok\");\r",
									"    shouldHandleData = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.expect(pm.response.status).to.be.equal(\"OK\");\r",
									"    shouldHandleData = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request did not fail\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    shouldHandleData = true;\r",
									"});\r",
									"\r",
									"if (shouldHandleData) {\r",
									"    console.log(\"Do whatever you want with your data\")\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						},
						"description": "This request validates the response of a Get http request, comparing each item of an array with a predefined json schema.\r\nFor more information about Json Schema properties for array objects, check this link (https://json-schema.org/understanding-json-schema/reference/object.html) and this link (https://www.chaijs.com/)"
					},
					"response": []
				},
				{
					"name": "Get User - Validate Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let shouldHandleData = false;\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.have.body;\r",
									"    shouldHandleData = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Got response with body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    shouldHandleData = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request did not fail\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    shouldHandleData = true;\r",
									"});\r",
									"\r",
									"pm.test(\"Body has some content\", function () {\r",
									"    console.log(pm.response)\r",
									"    pm.expect(pm.response.responseSize).to.be.greaterThan(0);\r",
									"    shouldHandleData = true;\r",
									"});\r",
									"\r",
									"if (shouldHandleData) {\r",
									"    console.log(\"Do whatever you want with your data\")\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						},
						"description": "This request validates the response of a Get http request, comparing each item of an array with a predefined json schema.\r\nFor more information about Json Schema properties for array objects, check this link (https://json-schema.org/understanding-json-schema/reference/object.html) and this link (https://www.chaijs.com/)"
					},
					"response": []
				},
				{
					"name": "Get User - Validate Array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"username\": {\r",
									"            \"type\": \"string\"\r",
									"\r",
									"        },\r",
									"        \"email\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"address\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"street\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"suite\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"city\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"zipcode\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"geo\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"lat\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"lng\": {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"lat\",\r",
									"                        \"lng\"\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"street\",\r",
									"                \"suite\",\r",
									"                \"city\",\r",
									"                \"zipcode\",\r",
									"                \"geo\"\r",
									"            ]\r",
									"        },\r",
									"        \"phone\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"website\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"company\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"catchPhrase\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"bs\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"name\",\r",
									"                \"catchPhrase\",\r",
									"                \"bs\"\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"username\",\r",
									"        \"email\",\r",
									"        \"address\",\r",
									"        \"phone\",\r",
									"        \"website\",\r",
									"        \"company\"\r",
									"    ]\r",
									"};\r",
									"pm.test(\"Status code is 200 or 202\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
									"});\r",
									"\r",
									"let shouldHandleData = true;\r",
									"pm.test('Schema is valid', function () {\r",
									"    const validateSchema = tv4.validate(pm.response.json(), schema);\r",
									"    shouldHandleData &= validateSchema;\r",
									"    pm.expect(validateSchema).to.be.true;\r",
									"});\r",
									"\r",
									"if (shouldHandleData) {\r",
									"    console.log(\"Do whatever you want with your data\")\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users"
							]
						},
						"description": "This request validates the response of a Get http request, comparing the whole data with the predefined schema.\r\nThe response of the Get request is an array of objects, and to validate it without looping the array, you must inform that the data type is an array, and also inform the schema of each item.\r\nFor more information about Json Schema properties for array objects, check this link (https://json-schema.org/understanding-json-schema/reference/array.html)"
					},
					"response": []
				},
				{
					"name": "Get User - Validate Single Object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"username\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"email\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"address\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"street\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"suite\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"city\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"zipcode\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"geo\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"lat\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"lng\": {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"lat\",\r",
									"                        \"lng\"\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"street\",\r",
									"                \"suite\",\r",
									"                \"city\",\r",
									"                \"zipcode\",\r",
									"                \"geo\"\r",
									"            ]\r",
									"        },\r",
									"        \"phone\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"website\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"company\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"catchPhrase\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"bs\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"name\",\r",
									"                \"catchPhrase\",\r",
									"                \"bs\"\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"username\",\r",
									"        \"email\",\r",
									"        \"address\",\r",
									"        \"phone\",\r",
									"        \"website\",\r",
									"        \"company\"\r",
									"    ]\r",
									"};\r",
									"pm.test(\"Status code is 200 or 202\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
									"});\r",
									"pm.test(\"Status code is Ok\", function () {\r",
									"    pm.expect(pm.response.code).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.have.body;\r",
									"});\r",
									"\r",
									"let shouldHandleData = true;\r",
									"const jsonData = pm.response.json();\r",
									"for (const item of jsonData) {\r",
									"    pm.test('Schema is valid', function () {\r",
									"        const validateSchema = tv4.validate(item, schema);\r",
									"        shouldHandleData &= validateSchema;\r",
									"        pm.expect(validateSchema).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"if (shouldHandleData) {\r",
									"    console.log(\"Do whatever you want with your data\")\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users"
							]
						},
						"description": "This request validates the response of a Get http request, comparing each item of an array with a predefined json schema.\r\nFor more information about Json Schema properties for array objects, check this link (https://json-schema.org/understanding-json-schema/reference/object.html)"
					},
					"response": []
				},
				{
					"name": "Get User - Validate Single Object With Predefined Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"username\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"Antonette\", \"Samantha\"]\r",
									"\r",
									"        },\r",
									"        \"email\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"address\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"street\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"suite\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"city\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"zipcode\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"geo\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"lat\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"lng\": {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"lat\",\r",
									"                        \"lng\"\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"street\",\r",
									"                \"suite\",\r",
									"                \"city\",\r",
									"                \"zipcode\",\r",
									"                \"geo\"\r",
									"            ]\r",
									"        },\r",
									"        \"phone\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"website\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"company\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"catchPhrase\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"bs\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"name\",\r",
									"                \"catchPhrase\",\r",
									"                \"bs\"\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"username\",\r",
									"        \"email\",\r",
									"        \"address\",\r",
									"        \"phone\",\r",
									"        \"website\",\r",
									"        \"company\"\r",
									"    ]\r",
									"};\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let shouldHandleData = true;\r",
									"const jsonData = pm.response.json();\r",
									"for (const item of jsonData) {\r",
									"    pm.test('Schema is valid', function () {\r",
									"        const validateSchema = tv4.validate(item, schema);\r",
									"        shouldHandleData &= validateSchema;\r",
									"        pm.expect(validateSchema).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"if (shouldHandleData) {\r",
									"    console.log(\"Do whatever you want with your data\")\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users"
							]
						},
						"description": "This request validates the response of a Get http request, comparing each item of an array with a predefined json schema.\r\nThis Json schema validates if the username property has specific values.\r\nFor more information about Json Schema properties for objects, check this link (https://json-schema.org/understanding-json-schema/reference/object.html)"
					},
					"response": []
				}
			],
			"description": "IMPORTANT: None of the data is going to be changed in the database. This endpoint is just simulating a REST Api behaviour",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "post_id",
			"value": "<THE_POST_ID>"
		}
	]
}